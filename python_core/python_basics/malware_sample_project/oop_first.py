from abc import ABC, abstractclassmethod

class MalwareSample:
    
    def __init__(self, file_name, file_hash, detection_result):
        self.file_name = file_name
        self.file_hash = file_hash
        self.detection_result = detection_result
    
    def display_info(self):
        print(f"""
              Filename: '{self.file_name}' 
              Hash '{self.file_hash}'
              Detection result: {self.detection_result}
              """)

    def is_detected(self):
        return self.detection_result
    
    @classmethod
    def from_dict(cls, data_dict):
        return  cls(
            data_dict['file_name'],
            data_dict['file_hash'],
            data_dict['detection_result'],
        )
    
    @staticmethod
    def validate_hash(hash):
        if not hash:
            return "Hash is not valid"
        return "Hash is valid"
    
    def __str__(self):
        return f"PEMalwareSample: {self.file_name} Detected: {self.detection_result}"


class PEMalwareSample(MalwareSample):
    
    def __init__(self, file_name, file_hash, detection_result, pe_sections=None):
        super().__init__(file_name, file_hash, detection_result)
        if pe_sections is not None:
            self.pe_sections = pe_sections 
        else:
            self.pe_sections = []
        
    def display_info(self):
        print(f"""
              Filename: '{self.file_name}' 
              Hash '{self.file_hash}'
              Detection result: {self.detection_result}
              PE Sections: {self.pe_sections}
              """)
    
    def __str__(self):
        return f"MalwareSample: {self.file_name} Detected: {self.detection_result} Sections: {len(self.pe_sections)}"


class MalwareRepository:
    
    def __init__(self, samples=None):
        if samples is not None:
            self.samples = samples
        else:
            self.samples = []
    
    def add_sample(self, sample):
        self.samples.append(sample)
    
    def get_sample_by_hash(self, file_hash):  
        for sample in self.samples:
            if sample.file_hash == file_hash:
                return sample
        return "Not Found for getting sample"

    def remove_sample_by_hash(self, file_hash):
        for sample in self.samples:
            if sample.file_hash == file_hash:
                self.samples.remove(sample)
        return "Not found for deleting sample"
    
    def list_all_samples(self):
        if not len(self.samples):
            print("Empty List")
            return
        print("===List of all Samples===")
        for sample in self.samples:
            print(sample)
        print("=========================")
     
        
class MalwareAnalysisReport:
    def __init__(self, sample, analysis_time, verdict):
        if not isinstance(sample, MalwareSample):
            raise TypeError("Sample must be only MalwareSample instance")
        else:
            self.sample = sample
        self.analysis_time = analysis_time
        self.verdict = verdict
    
    def generate_repost(self):
        print("REPORT ABOUT SAMPLE")
        print(self.sample)
        print(f"Analysis time: '{self.analysis_time}'")
        print(f"Verdict: '{self.verdict}'")
        print("====================")
        
        

class ThreatIntelSource(ABC):
    
    @abstractclassmethod
    def fetch_data():
        pass


class YaraThreatSource(ThreatIntelSource):
    
    def fetch_data():
        print("Simulated Yara threat data fetched")

    
def check_malicious_software(malware_sample):
    if isinstance(malware_sample, MalwareSample):
        if malware_sample.detection_result:
            return f"Malicious Software: {malware_sample.file_name}"
        return f"Not a malicious Software: {malware_sample.file_name}"
    
    return f"Can check only instances of MalwareSample and PeMalwareSample classes"    


# Basic Malware Sample

malware_sample = MalwareSample("Dota2", "Pomoika2", True)
# malware_sample.display_info()        
pe_malware_sample = PEMalwareSample("CS2", "zaregai2", False, ['first', 'second'])
# pe_malware_sample.display_info()

# print(check_malicious_software(pe_malware_sample))
# print(check_malicious_software(malware_sample))


# Malware Repository

malware_repo = MalwareRepository()
# malware_repo.list_all_samples()
malware_repo.add_sample(malware_sample)
malware_repo.add_sample(pe_malware_sample)
malware_repo.remove_sample_by_hash('Pomoika2')
# malware_repo.list_all_samples()


# Malware cls method and static method

data_dictionary = {
    'file_name': 'heartstone',
    'file_hash': 'topdeck',
    'detection_result': True,
}

malware_sample_2 = MalwareSample.from_dict(data_dictionary)
# malware_sample_2.display_info()
# print(malware_sample_2.validate_hash(malware_sample_2.file_hash))


# Malware Report 
malware_sample_2_report = MalwareAnalysisReport(malware_sample_2, '2024-02-02', 'malicious')
# malware_sample_2_report.generate_repost()