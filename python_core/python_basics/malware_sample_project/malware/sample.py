
class MalwareSample:
    def __init__(self, file_name, file_hash, detection_result):
        self.file_name = file_name
        self.file_hash = file_hash
        self.detection_result = detection_result
    
    def display_info(self):
        print(f"""
              Filename: '{self.file_name}' 
              Hash '{self.file_hash}'
              Detection result: {self.detection_result}
              """)

    def is_detected(self):
        return self.detection_result
    
    @classmethod
    def from_dict(cls, data_dict):
        return  cls(
            data_dict['file_name'],
            data_dict['file_hash'],
            data_dict['detection_result'],
        )
    
    @staticmethod
    def validate_hash(hash):
        if not hash:
            return "Hash is not valid"
        return "Hash is valid"
    
    def __str__(self):
        return f"PEMalwareSample: {self.file_name} Detected: {self.detection_result}"


class PEMalwareSample(MalwareSample):
    
    def __init__(self, file_name, file_hash, detection_result, pe_sections=None):
        super().__init__(file_name, file_hash, detection_result)
        if pe_sections is not None:
            self.pe_sections = pe_sections 
        else:
            self.pe_sections = []
        
    def display_info(self):
        print(f"""
              Filename: '{self.file_name}' 
              Hash '{self.file_hash}'
              Detection result: {self.detection_result}
              PE Sections: {self.pe_sections}
              """)
    
    def __str__(self):
        return f"MalwareSample: {self.file_name} Detected: {self.detection_result} Sections: {len(self.pe_sections)}"
    