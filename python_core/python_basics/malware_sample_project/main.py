from malware.sample import MalwareSample, PEMalwareSample, WebMalwareSample
from malware.repository import MalwareRepository
from malware.scanner import MalwareScanner
from malware.report import MalwareAnalysisReport


def check_malicious_software(malware_sample):
    if isinstance(malware_sample, MalwareSample):
        if malware_sample.detection_result:
            return f"Malicious Software: {malware_sample.file_name}"
        return f"Not a malicious Software: {malware_sample.file_name}"

    return "Can check only instances of MalwareSample and PeMalwareSample classes"


#  Basic Class Creation Practice
malware_sample = MalwareSample("Dota2", "Pomoika2", True)
malware_sample.display_info()
pe_malware_sample = PEMalwareSample("CS2", "zaregai2", False, ["first", "second"])
pe_malware_sample.display_info()
print(check_malicious_software(pe_malware_sample))
print(check_malicious_software(malware_sample))


# instance methods Practice
malware_repo = MalwareRepository()
# malware_repo.list_all_samples()
malware_repo.add_sample(malware_sample)
malware_repo.add_sample(pe_malware_sample)
malware_repo.remove_sample_by_hash("Pomoika2")
# malware_repo.list_all_samples()


# Class method practice
data_dictionary = {
    "file_name": "heartstone",
    "file_hash": "topdeck",
    "detection_result": True,
}

malware_sample_2 = MalwareSample.from_dict(data_dictionary)
# malware_sample_2.display_info()
# print(malware_sample_2.validate_hash(malware_sample_2.file_hash))


# Has a relation (Composition) practice
malware_sample_2_report = MalwareAnalysisReport(
    malware_sample_2, "2024-02-02", "malicious"
)
# malware_sample_2_report.generate_report()


# Polymorphism practice
web_sample = WebMalwareSample("file_name1", "file_hash1", False, "www.gogle.com")
generic_sample = MalwareSample("file_name2", "file_hash2", True)
pe_malware_sample = PEMalwareSample(
    "file_name3", "file_hash3", False, ["first", "second"]
)
samples_list = [web_sample, generic_sample, pe_malware_sample]


def process_sample(samples):
    for sample in samples:
        sample.display_info()


process_sample(samples_list)

# Encapsulation practice
scanner = MalwareScanner("scanner", "1.0")
scanner.scan_sample(web_sample)
print(scanner.get_scan_result("file_hash1"))
print(scanner.last_scan_time)
print(dir(scanner))

