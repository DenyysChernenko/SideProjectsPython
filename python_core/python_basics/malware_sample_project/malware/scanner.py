from datetime import datetime
from .sample import MalwareSample

class MalwareScanner:
    """Class Represents Malware Scanner"""
    def __init__(self, scan_name, version):
        self._scan_name = scan_name
        self._version = version
        self._last_scan_time = None
        self.scan_result = {}
    
    @property
    def scan_name(self):
        return self._scan_name

    @property
    def version(self):
        return self._version

    @property
    def last_scan_time(self):
        return self._last_scan_time

    @scan_name.setter
    def scan_name(self, new_scan_name):
        if not isinstance(new_scan_name, str):
            raise ValueError("Scan name must be a string")
        self._scan_name = new_scan_name
    
    @version.setter
    def version(self, new_version):
        if not isinstance(new_version, str):
            raise ValueError("Version must be a string")
        self._version = new_version
    
    def _update_last_scan_time(self):
        self._last_scan_time = datetime.today()
    
    def scan_sample(self, sample):
        self._update_last_scan_time()
        if not isinstance(sample, MalwareSample):
            raise ValueError("Can scan only instances or subclasses of Malware Sample")
        self.scan_result[sample.file_hash] = sample.detection_result
    
    def get_scan_result(self, file_hash):
        if file_hash not in self.scan_result:
            raise KeyError(f"Scan result for hash '{file_hash}' not found")
        return self.scan_result[file_hash]
        